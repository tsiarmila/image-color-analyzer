document.getElementById('fileInput').addEventListener('change', function(event) {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onloadstart = function() {
        document.getElementById('spinner').style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    };

    reader.onload = function() {
        const img = new Image();
        img.onload = function() {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const previewImage = document.getElementById('resizedImageContainer');
            const MAX_WIDTH = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const MAX_HEIGHT = 100;

            let width = img.width;
            let height = img.height;

            if (width > height) {
                if (width > MAX_WIDTH) {
                    height *= MAX_WIDTH / width;
                    width = MAX_WIDTH;
                }
            } else {
                if (height > MAX_HEIGHT) {
                    width *= MAX_HEIGHT / height;
                    height = MAX_HEIGHT;
                }
            }

            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');

            canvas.width = width;
            canvas.height = height;
            ctx.drawImage(img, 0, 0, width, height);

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ img
            previewImage.src = canvas.toDataURL('image/jpeg');
            previewImage.style.display = 'block';
            previewImage.className = 'previewImage';

            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const pixelData = imageData.data;
            const pixelSize = 10;

            const colorCount = {};
            for (let y = 0; y < canvas.height; y += pixelSize) {
                for (let x = 0; x < canvas.width; x += pixelSize) {
                    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–∏–∫—Å–µ–ª—è
                    const index = (y * canvas.width + x) * 4;
                    const r = pixelData[index];
                    const g = pixelData[index + 1];
                    const b = pixelData[index + 2];
                    const a = pixelData[index + 3];

                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
                    if (a === 0) {
                        continue;
                    }

                    // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RGB –≤ HSV –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å)
                    const saturation = calculateSaturation(r, g, b);
                    if (saturation < 0.2) { // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –ø–æ—Ä–æ–≥ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
                        continue;
                    }

                    // –†–∏—Å—É–µ–º "–ø–∏–∫—Å–µ–ª—å" —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                    ctx.fillStyle = `rgba(${r},${g},${b},${a})`;
                    ctx.fillRect(x, y, pixelSize, pixelSize);

                    const color = `rgb(${r},${g},${b})`;

                    if (colorCount[color]) {
                        colorCount[color]++;
                    } else {
                        colorCount[color] = 1;
                    }
                }
            }
            const sortedColors = Object.keys(colorCount).sort((a, b) => colorCount[b] - colorCount[a]);

            console.log("sortedColors", sortedColors);
            const colors = sortedColors.slice(0, 5);

            document.documentElement.style.setProperty('--color1', colors[0]);
            document.documentElement.style.setProperty('--color2', colors[1]);
            document.documentElement.style.setProperty('--color3', colors[2]);
            document.documentElement.style.setProperty('--color4', colors[3]);
            document.documentElement.style.setProperty('--color5', colors[4]);

            const colorPalette = document.getElementById('colorPalette');
            colorPalette.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–≤–µ—Ç–∞

            colors.forEach(color => {
                const box = document.createElement('div');
                box.className = 'box';
                const colorBox = document.createElement('div');
                colorBox.className = 'colorBox';
                colorBox.style.backgroundColor = color;
                box.appendChild(colorBox);

                const infoContainer = document.createElement('div'); // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è hexSpan –∏ copyButton
                infoContainer.className = 'infoContainer';

                const hexSpan = document.createElement('span');
                hexSpan.className = 'hexSpan';
                hexSpan.innerText = rgbToHex(color); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RGB –≤ HEX
                infoContainer.appendChild(hexSpan);

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è HEX-–∫–æ–¥–∞ —Ü–≤–µ—Ç–∞
                const copyButton = document.createElement('button');
                copyButton.innerHTML = '&#128203;'; // Unicode —Å–∏–º–≤–æ–ª –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ 'üìÉ'
                copyButton.title = 'Copy';
                copyButton.addEventListener('click', function() {
                    copyToClipboard(rgbToHex(color));
                });
                infoContainer.appendChild(copyButton);
                box.appendChild(infoContainer);

                colorPalette.appendChild(box);
            });

            // –°–∫—Ä—ã—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
            document.getElementById('spinner').style.display = 'none';
        };
        img.src = reader.result;
    };
    reader.readAsDataURL(file);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RGB –≤ HEX
function rgbToHex(rgb) {
    // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É rgb() –Ω–∞ —á–∏—Å–ª–∞
    const [r, g, b] = rgb.substring(4, rgb.length - 1).split(',').map(Number);
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ HEX –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

function copyToClipboard(text) {
    const input = document.createElement('input');
    input.style.position = 'fixed';
    input.style.opacity = 0;
    input.value = text;
    document.body.appendChild(input);
    input.select();
    document.execCommand('copy');
    document.body.removeChild(input);
    alert('Color copied to clipboard: ' + text);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ HSV
function calculateSaturation(red, green, blue) {
    const max = Math.max(red, green, blue);
    const min = Math.min(red, green, blue);
    const delta = max - min;

    if (max === 0) {
        return 0;
    }

    return delta / max;
}
